[tool.poetry]
name = "elkm1-lib"
version = "2.1.0"
description = "Library for interacting with ElkM1 alarm/automation panel."
homepage = "https://github.com/gwww/elkm1"
authors = ["Glenn Waters <gwwaters+elkm1@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
]
include = ["CHANGELOG.md", "bin/**/*"]
exclude = ["test"]

[tool.poetry.dependencies]
python = ">= 3.9,<4.0"
pyserial-asyncio = ">= 0.5"

[tool.poetry.dev-dependencies]
attrs = ">= 21.2"
black = ">= 22.3"
colorlog = ">= 4.0"
isort = ">= 5.10"
mypy = ">= 0.9"
pylint = ">= 2"
pytest = ">= 7"
pytest-asyncio = ">= 0.18"
urwid = ">= 2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.pyright]
pythonVersion = "3.9"

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Enable once current issues are fixed:
# consider-using-namedtuple-or-dataclass (Pylint CodeStyle extension)
# consider-using-assignment-expr (Pylint CodeStyle extension)
disable = [
    "format",
    "abstract-class-little-used",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-assignment-expr",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
